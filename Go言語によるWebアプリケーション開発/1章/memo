1章 WebSocketを使ったチャットアプリケーション

Goにはチャネルなどの並行処理向けのしくみが言語に組み込まれているので
すべてのクライアントが同期されている状態を作ることは容易。

GoのコードにHTMLを埋め込むことも可能だがあまり意味がない。
コードをクリーンにするためにテンプレートを利用する。

テンプレートをコンパイルするのは1回だけで問題ない。
このような1回しかやらない処理をGoでは複数用意されている。
最も単純なのは関数を定義してテンプレの型を生成し初期化処理のコードを呼び出してコンパイルする。

オープンソースの強みとしていろいろ問題解決に使えるパッケージが公開されているので
それを使う方が何かと良い。
パッケージを利用する際はgo getコマンドを利用して取得すること。

チャネルを使わずにマップを操作すると同時変更時にメモリ破壊など予期せぬ
状態がもたらされる可能性があるのでやらない方がよい。
goroutineとして実行する場合、バックグラウンドで実行されるのでアプリケーション内の
ほかの処理をブロックすることがない。

プロジェクト内で何度もハードコードされる値であれば外だしして独立したファイルにして
まとめて定義する方がよい。

長期間にわたって利用するコードはユニットテストを作成したほうが良い。
そういったものでなくてもログ出力は用意すべき。
GoはTDDの考え方が強く失敗させてから成功させるという流れで開発していく。