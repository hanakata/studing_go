第2章 プログラムの構成と実行
Goで使用できるエンコーディングはUTF-8のみ。
なのでUTF-8使えるエディタを使う必要がある。

実行方法はgo run [ファイルパス]

■書き方
・package
Goでは変数や関数といったプログラムのすべての要素はなんらかのパッケージに属する。
プログラムはパッケージの宣言からスタート。
package mainであればmainパッケージに関するプログラムであることを示す。
またGoには1つのファイルに記述できるのは単一パッケージについてのみという原則がある。

・import
ファイル内のプログラムで使用するパッケージを指定するためのimport宣言。
有用なライブラリはすべて固有の名前を持つパッケージとして提供される。
必要なパッケージがなければimport宣言は省略することも可能。
参照されないパッケージがimport宣言されていた場合、コンパイルエラーになる。

・エントリーポイント
func main()は関数mainの定義。Goのエントリーポイントはmainパッケージのmain関数から。

■プログラムのビルド
実行ファイルを作成するには以下
go build -o <出力ファイル> <ソースファイル>
出力ファイルに.exeは必須。
コンパイルすると必要なファイルを実行ファイルにコピーして組み込む。
そのためファイルサイズは大きくなる。

■パッケージと構成
例えばzooアプリケーションを作成する場合、以下のフォルダ構成にする
zoo
|----animals
|       |----elephant.go
|       |----monkey.go
|       |----rabbit.go
|----main.go

この場合、パッケージはanimalsパッケージとmainパッケージが存在することとなる。
animalsフォルダ配下にあるファイルは全てanimalsパッケージになる。
パッケージはpackageに同じものを宣言していれば同じパッケージ扱いになる。
その場合、1ファイルに書いているのと同じ状態になる。
利用したいパッケージはimport文に追加すると利用可能となる。
その場合、パス指定をすることとなる。

フォルダ構成の基本としてフォルダ名はパッケージ名と同じにすること。
違っても問題はないが混乱を生む。

main.goファイルがある場所でなにも引数を渡さずにgo buildを実行するとexeが作成される。

■mainパッケージの分割
mainパッケージは分割が可能。
例えば以下のような形。
zoo
|----animals
|       |----elephant.go
|       |----monkey.go
|       |----rabbit.go
|----app.go
|----main.go

この場合main.goで呼び出す場合、main.関数名のような形は必要ない。
この状態でmain.goを指定してgo runを実行すると以下のようになる。
# command-line-arguments
.\main.go:10:14: undefined: AppName
これはオプションで指定されたファイルのみを実行するため。
なので実行する場合にはapp.goを指定する必要がある。アスタリスクも可。
ただしbuidの場合は問題なく実行できる。