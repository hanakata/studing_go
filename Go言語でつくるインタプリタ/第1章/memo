第1章 字句解析
■字句解析
プレーンテキストはプログラミング言語として解釈するのは難しい。
なのでソースコードの表現を2回変更する
ソースコード→トークン列→抽象構文木
ソースコードからトークン列への変換＝字句解析
トークン列は小さな分類しやすいデータ構造になって構文解析器に渡される→抽象構文木になる。

トークンには全てに元のソースコードを表現したものが結びついている。

■トークンを定義する
最初にすることは字句解析器が出力するトークンを定義すること。
最初のステップで字句解析するための言語の一部は以下
let five = 5;
let ten = 10;
let add = fn(x,y){
    x + y;
};
let result = add(five,ten)
トークンとして何があるか
・数＝トークン＝タイプが必要
・変数名＝識別子
・言語の一部＝キーワード
・記号
数は数として分かればOK
キーワードと記号は区別が必要。

データ構造は？
タイプ属性は必須
トークンのリテラル値保存場所

ILLEGALはトークンや文字が未知であることを表す。
EOFはファイル終端。

■字句解析器
この節のゴールは字句解析器を書く。
動きとして、入力はソース、出力はソースコードを表現するトークン列。
入力を先頭から読み進み認識したトークンを順にひとつずつ出力する。
バッファ、保存は不要。
