第5章 関数
■関数宣言
関数宣言は名前、パラメータリスト、省略可能な結果のリスト、本体から構成される。
パラメータリストはな雨と型を指定する
パラメータはローカル変数であり引数は呼び出し元が提供。
結果のリストを持つ関数は実行が関数の最後に到達しなければならない。

■再帰
関数は再帰的、すなわち自分自身を直接的、間接的に呼び出しても良い。

■複数戻り値
return に対して複数の変数を与えると複数の戻り値が返せる。

■エラー
関数によってはいつも処理が成功するものはあるが、通常成功は保証されていない。
なので失敗は予期される振る舞いのひとつ。
予期される失敗の1つが失敗であるような関数は追加の結果を慣習的に最後に返す。
追加の結果の型はerrorとなりnilかnilじゃないか。
nilの場合は成功であり、nilでなければエラー。

エラー処理戦略は5つ
1.エラーを伝搬する。そうすることでサブルーチンのエラーは呼び出し元のエラーとなる。
エラーメッセージは頻繁に連鎖するためメッセージの文字列は大文字にすべきではない。
メッセージを設計するときはそれぞれのメッセージが十分かつ関連する詳細を含み問題に対して意味のあるものにすること。
2.ふただび試みる
3.処理を進めるのが不可能であれば呼び出しもとがエラーを表示してプログラムを停止する。
  これはmainパッケージに限定すべき
4.エラーを記録して制限された機能で処理を続ける。
5.エラーを無視。すごく希。

■関数値
Goでは関数はファーストクラス値のため他の値と同様に型を持ち、変数に代入したり関数へ渡したり返したり出来る。
ただし比較は出来ない。関数型のゼロ値はnil。nilの関数を呼び出すとパニックが発生。

■無名関数
名前つき関数はパッケージレベルでだけ宣言可能。関数値を表す関数リテラルは全ての式内で使える。

■可変個引数関数
可変個の引数で呼び出すことの出来る関数。
可変個引数関数を宣言するためには最後のパラメータの型の前に省略記号...をつける。

■遅延関数呼び出し
deferを利用するとそれを含む関数が完了するまで待って実行してくれる。
基本的にはオープン-クローズ、ロック-アンロックのような対になるもので利用する。

■パニック
実行時の誤りをGoランタイムが検出した場合にはパニックになる。
パニックが発生すると通常の実行が停止しゴルーチン内でのすべての遅延関数呼び出しが
発生しログメッセージを出力してクラッシュする。
例外に似ているようではあるがGoではそもそも予期できるものはerror関数で何とかするべき。

■リカバー
遅延されている関数内でrecoverが呼び出され、その関数でパニック状態になっている場合、
その現状を終了させてパニック値を返す。
動作が復帰するわけではないが正常にリターンする。
