第1章 チュートリアル

最初はHello Worldから。
一回実行できればよいのであればgo runで。2回以上実行したければgo buildで。
書いたコードにはとりあえずgo fmtを実行すること。
コマンド例は以下。
gofmt -d main.go
-dは差分表示。

goimportは必要に応じてインポート宣言の挿入と削除を行ってくれる。
通常では入っていないものなので以下コマンドで入れること。
go get golang.org/x/tools/cmd/goimports

■コマンドライン引数
プログラミングは何らかの入力を処理して出力を生成するもの。
osパッケージ
プラットフォームから独立した形式でオペレーティングシステムを扱うための関数と値を提供。
コマンドライン引数はosパッケージの一部であるArgsという名前の変数でプログラムから利用できる。
変数os.Argsは文字列のスライス。スライスは動的に大きさが変わる配列。
os.Argsの最初の要素であるos.Args[0]はコマンド自身の名前。他の要素はプログラム実行時に渡された引数。

コメントは//で始まり慣習によりパッケージ宣言の直前のコメントにパッケージの説明を記載する。
変数は初期化でき、値を与えなければ初期値としてゼロ値が入る。
ゼロ値は数値型だと0、文字列だと""が入る。
+=は代入演算子
:=は省略変数宣言
for文はデータ型の値の範囲を繰り返すことも出来る。
rangeはインデックスとそのインデックスの値を生成する。
_はブランク識別子。使わない値を入れる変数。

変数を定義する場合、どれを使うべきか。
s := ""は最も簡潔ではあるがパッケージレベルの変数には使えない。
var s stringは文字列に対するゼロ値に頼っている。
var s = ""は複数の変数を宣言するときを除いてほぼ使われない。
var s string = ""は変数の型について明示的であり、変数と初期値が同じ型でない場合に必要。
実際に使うべき定義方法は1つめと2つめ。
+=文は古い文字列、空白文字、新たな引数を連結して文字列をsに代入する。
sの古い内容は使われないのでそのうちガベージコレクトされる。
関係するデータ量が大きい場合にはこの方法は高くつくので効率的な解決方法としてstringパッケージのjoin関数を使うこと。

■重複した行を見つける
ファイルのコピー、表示、検索、ソート、集計などを行うプログラムは類似した構造を持つ。
その構造とは？
入力に対してループし個々の要素に対して何らかの計算を行い、都度、もしくは最後に出力生成する。

