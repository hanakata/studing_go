第3章 基本データ型

コンピュータは基本的にワードと呼ばれる固定長数値に対して操作を行う。
ワードは整数、浮動小数点、ビットセット、メモリアドレスとして解釈され、
それぞれのデータを表すものとなる。
Goの型は以下4つ
・基本型
・合成型
・参照型
・インターフェース型

■整数
Goの数値データには整数、浮動小数点数、複素数が含まれている。
二項演算子は優先順位がある。
優先順位の低いものを先に実行する場合や明確にするために()を利用する。

x<<nとx>>nのシフト演算ではオペランドnがシフトするビット数を決定し
それは符合なしてある必要がある。xは符号なしでもありでも良い。
算術的にはx<<nは2^nによる乗算と同じ。x>>nは2^nによる切捨て除算と同じ。

ビットセットを実装したり、バイナリ形式を解析したりハッシュや暗号化のためのビット演算などの
場合しか符合なし数値は使われない。

型が一致しないとコンパイルエラーになる。
それを解決するにはすべて同じ共通の型にしてしまうこと。
ただし型変換する場合に大きな整数を小さな整数へと狭めたり広げたりする変換は
値が変更されたり精度を失う可能性がある。
なのでオペランドが対象の値の範囲外になるような変換は控えるべき。

どのようなサイズや型の整数リテラルでも10進数表記、0で始まる8進数、0xで始まる16進表記として書くことが出来る。
runeリテラルはシングルクォート内に文字として書かれる。

・浮動小数点
Goはfloat32とfloat64の2つを提供している。
浮動小数点はPrintfの%gで表示すると便利。

mathパッケージは数学関数に加えてIEEE754で定義された特別な値を生成したり検出したりする関数を含んでいる。

■複素数
Goはcomplex64とcomplex128の2つのサイズの複素数を提供している。
それぞれfloat32とfloat64が元。

■ブーリアン
bool型＝ブーリアンでありtrueかfalseをとる。x==trueとなっていれば単純にxと書けばよい。

■文字列
文字列は不変なバイト列。文字列は値0を持つバイトも含めて任意のデータおを含んでいても良いが
基本は人が読めるテキストを含んでいる。
文字列は不変なので文字列のデータを直接変更することは出来ない。

Goのソースコードは常にUTF-8でエンコードされる。なのでGoテキスト文字列は慣習的にUTF-8で解釈される。

pathパッケージとpath/filepathパッケージは階層的な名前を操作するためのより汎用的な関数を提供している。
pathはURLとかに向いており、path/filepathはホストのプラットフォーム規則に向いている。

文字列はバイトスライスに変換することも戻すことも出来る。

任意のルーンのUTF-8エンコーディングをbytes.Bufferへ追加するにはbytes.BufferのWriteRuneメソッドが最善。
ただし[]などのASCIIはWriteByteでもかまわない。
文字列と数値間の変換ではstrconvパッケージの関数で行う。

■定数
定数はコンパイラが値を分かっていて実行時ではなくコンパイル時に評価が行われることが保証されている式。
const宣言では定数生成器であるiotaが使える。
