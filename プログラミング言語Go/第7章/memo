第7章 インタフェース
インタフェース型は他の型の振る舞いに関する一般化、あるいは抽象化を表す。
インタフェースを利用することで柔軟で適応性のある関数を書くことが出来る。

■契約としてのインタフェース
今まで見てきたのは具象型。
インタフェース型は抽象方。
インタフェースは値が持つメソッドのいくつかを示しているだけ。

■インタフェース型
インタフェース型は具象型がそのインタフェースのインスタンスとしてみなされるために
持たなければならないメソッドの集まりを定義する。
io.Writer型は最も広く使われているインタフェースの一つ。

■インタフェースを満足する
インタフェースが要求している全てのメソッドを型が保持していればその型はインタフェースを満足する。
例えば*os.Fileはio.Reader、Writer、Closer,ReadWriiterを満足している。
ある具象型が特定のインタフェースを満足しているという意味で具象型がそのインタフェースである
と表現されることもある。

■インタフェース値
インタフェース値は概念的に具象型とその型の値という2つの構成要素を持っている。
構成要素は動的な型と動的な値。
インタフェース値の動的な型が何であるかはコンパイル時には分からない。
なので呼び出しは動的なディスパッチを使う必要がある。

nilインタフェース値はたまたまnilであるポインタを含んでいるインタフェース値と同じではない。

■sort.Interfaceでのソート
sort.Sort関数は列やその要素の表現については安易も想定しない。
変わりに汎用ソートアルゴリズムとソートできる個々の列型との間の契約を定めるためにインタフェースsort.Sortを使う。

■http.Handlerインタフェース
ListenAndServer関数はサーバのアドレスおよびすべてのリクエストをディスパッチするHandleインタフェースの
インスタンスを必要とする。
serverHTTPへcaseを追加し続けることは可能。
ただ現実的なアプリケーションはそれぞれのcaseに対して別の関数やメソッドを定義した方が良い。

■errorインタフェース
error型はエラーメッセージを返す単一メソッドを持ったインタフェース型。

■型アサーション
型アサーションはインタフェース値へ提供される演算。
構文的にはx.(T)とかく。xがインタフェース型の式、Tはアサート型。
アサーションはそのオペランドの動的な型がアサート型と一致するかを検査する。
次にアサート型がインタフェースの場合で型アサーションはxの動的な型がTを満足するかを研鑽する。

■型アサーションによるエラーの区別
エラーについて信頼性の高い検知方法は専用の型を使って構造化されたエラー値を表現すること。

■型switch
インタフェースはインタフェースのメソッドはそのインタフェースを満足している具象型の類似性を表現しているが
それらの具象型の表現の詳細と本質的な操作を隠蔽している。
またインタフェース値がさまざまな具象型の値を保持できることを活用しその
インタフェースをそれらの型の共用体とみなす。
