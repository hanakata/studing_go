第8章 ゴルーチンとチャネル
■ゴルーチン
並行に実行される個々の動作はゴルーチンと呼ばれる。
ゴルーチンを生成するにはgo文で生成する。
mainから戻ることあるいはプログラムを終了させる以外にゴルーチンを
他のゴルーチンからプログラム的に停止させることは出来ない。

ゴルーチンを使わないサーバだと逐次的なので最初のユーザが切らない限り別のユーザが使えない。
なのでゴルーチンを利用する。

■チャネル
ゴルーチンが並行なGoプログラムの活動であればチャネルはゴルーチン間の接続。
チャネルの作成はmakeを利用。
ch := make(chan int)
こんな感じで指定。この場合chは要素の型がintであるチャネルになる。
チャネルはデータ構造への参照なのでコピーしたりすると同じものを見ることになる。
チャネルはクローズをサポートしている。クローズすると受信しなくなる。

バッファなしチャネルへの送信操作は別のゴルーチンが同じチャネル上で受信を実行するまで送信しているゴルーチンを停止する。
1つのゴルーチンの出力が別のゴルーチンの入力になるように複数のゴルーチンを接続するためにチャネルを使える。
→パイプラインと呼ぶ。
チャネルが閉じられた後にそこに送信するとパニックが発生する。

バッファありチャネルは要素のキューを持っており最大の大きさはmakeに渡される容量の引数によって決まる。
ch = make(chan string,3)
バッファありチャネルに対する送信操作はキューの最後に要素を追加し受信操作はキューの先頭から要素を取り除く。
チャネルが一杯になると受信操作があるまで待ちになる。

■キャンセル
時には行っている処理を停止するようにゴルーチンに指示する必要がある。
ひとつのゴルーチンが別のゴルーチンを直接終了することは出来ない。
チャネルをクローズして受信できないようにすることは出来るのでそれを利用する。

